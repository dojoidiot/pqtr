#!/bin/bash

# PITS Photo FTP Server (pftp.sh)
# Simple FTP server for camera photo uploads
# No NAT, no firewall, no TLS - just basic FTP functionality

set -euo pipefail

# Configuration
SCRIPT_NAME=$(basename "$0")
FTP_USER="pftp"
FTP_PASS="pftp123"
FTP_ROOT="/var/pits/ftp"
FTP_LOG="/var/log/pits/pftp.log"
VSFTPD_CONF="/etc/vsftpd.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$FTP_LOG"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$FTP_LOG" >&2
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" | tee -a "$FTP_LOG"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$FTP_LOG"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Check prerequisites
check_prerequisites() {
    local missing_packages=()
    
    # Check for vsftpd
    if ! command -v vsftpd &> /dev/null; then
        missing_packages+=("vsftpd")
    fi
    
    if [[ ${#missing_packages[@]} -gt 0 ]]; then
        error "Missing required packages: ${missing_packages[*]}"
        error "Install with: sudo apt-get install ${missing_packages[*]}"
        exit 1
    fi
    
    log "Prerequisites check passed"
}

# Create necessary directories
create_directories() {
    mkdir -p "$FTP_ROOT" "/var/log/pits"
    log "Created necessary directories"
}

# Create FTP user
create_ftp_user() {
    # Create user if it doesn't exist
    if ! id "$FTP_USER" &> /dev/null; then
        useradd -d "$FTP_ROOT" -s /usr/sbin/nologin "$FTP_USER"
        log "Created FTP user: $FTP_USER"
    fi
    
    # Set password
    echo "${FTP_USER}:${FTP_PASS}" | chpasswd
    log "Set password for FTP user: $FTP_USER"
    
    # Set ownership
    chown -R "$FTP_USER:$FTP_USER" "$FTP_ROOT"
    chmod 755 "$FTP_ROOT"
    log "Set ownership and permissions for FTP root: $FTP_ROOT"
}

# Generate vsftpd configuration
generate_vsftpd_conf() {
    # Backup original config
    if [[ -f "$VSFTPD_CONF" && ! -f "${VSFTPD_CONF}.orig" ]]; then
        cp "$VSFTPD_CONF" "${VSFTPD_CONF}.orig"
        log "Backed up original vsftpd configuration"
    fi
    
    cat > "$VSFTPD_CONF" << EOF
# PITS Photo FTP Configuration
# Generated by $SCRIPT_NAME on $(date)
# Simple configuration: no NAT, no firewall, no TLS

# Basic settings
listen=YES
listen_ipv6=NO
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=YES
chroot_local_user=YES
allow_writeable_chroot=YES
secure_chroot_dir=/var/run/vsftpd/empty
pam_service_name=vsftpd

# User restrictions
userlist_enable=YES
userlist_deny=NO
userlist_file=/etc/vsftpd.userlist

# Passive mode (camera-friendly)
pasv_enable=YES
pasv_min_port=50000
pasv_max_port=50100
pasv_address=0.0.0.0

# Logging
xferlog_file=/var/log/vsftpd/xferlog
xferlog_std_format=YES
log_ftp_protocol=NO

# Performance
max_clients=50
max_per_ip=10
idle_session_timeout=600
data_connection_timeout=120

# Banner
ftpd_banner=Welcome to PITS Photo FTP Server
EOF
    
    log "Generated vsftpd configuration"
}

# Create user list
create_user_list() {
    echo "$FTP_USER" > /etc/vsftpd.userlist
    chown root:root /etc/vsftpd.userlist
    chmod 644 /etc/vsftpd.userlist
    log "Created FTP user list"
}

# Start FTP service
start_ftp_service() {
    # Enable and start vsftpd
    systemctl enable vsftpd
    systemctl restart vsftpd
    
    if systemctl is-active --quiet vsftpd; then
        log "Started vsftpd service"
    else
        error "Failed to start vsftpd service"
        exit 1
    fi
}

# Show status
show_status() {
    echo -e "\n${BLUE}=== PITS Photo FTP Status ===${NC}"
    echo -e "FTP User: $FTP_USER"
    echo -e "FTP Root: $FTP_ROOT"
    echo -e "FTP Log: $FTP_LOG"
    echo -e "Configuration: $VSFTPD_CONF"
    
    echo -e "\n${BLUE}=== Service Status ===${NC}"
    echo -e "vsftpd: $(systemctl is-active vsftpd 2>/dev/null || echo 'inactive')"
    
    echo -e "\n${BLUE}=== FTP Root Contents ===${NC}"
    if [[ -d "$FTP_ROOT" ]]; then
        ls -la "$FTP_ROOT" || echo "Cannot list FTP root directory"
    else
        echo "FTP root directory not found"
    fi
    
    echo -e "\n${BLUE}=== Connection Info ===${NC}"
    echo -e "Control Port: 21"
    echo -e "Passive Ports: 50000-50100"
    echo -e "No firewall rules configured"
    echo -e "No TLS/SSL encryption"
}

# Stop FTP service
stop_ftp() {
    log "Stopping PITS Photo FTP server..."
    
    # Stop service
    systemctl stop vsftpd 2>/dev/null || true
    systemctl disable vsftpd 2>/dev/null || true
    
    log "FTP service stopped"
}

# Test FTP connection
test_ftp() {
    echo -e "\n${BLUE}=== Testing FTP Connection ===${NC}"
    echo -e "Testing local FTP connection..."
    
    if command -v ftp &> /dev/null; then
        echo -e "Using 'ftp' command:"
        echo -e "  ftp localhost"
        echo -e "  Username: $FTP_USER"
        echo -e "  Password: $FTP_PASS"
    fi
    
    if command -v curl &> /dev/null; then
        echo -e "\nUsing 'curl' command:"
        echo -e "  curl -v ftp://localhost/ --user $FTP_USER:$FTP_PASS"
    fi
    
    if command -v lftp &> /dev/null; then
        echo -e "\nUsing 'lftp' command:"
        echo -e "  lftp -u $FTP_USER,$FTP_PASS localhost"
    fi
    
    echo -e "\n${YELLOW}Note: Test from another device using this machine's IP address${NC}"
}

# Show usage
show_usage() {
    cat << EOF
Usage: $SCRIPT_NAME <command>

Commands:
    start       Start FTP server
    stop        Stop FTP server
    status      Show current FTP status
    restart     Restart FTP server
    test        Test FTP connection
    help        Show this help message

Examples:
    $SCRIPT_NAME start     # Start FTP server
    $SCRIPT_NAME stop      # Stop FTP server
    $SCRIPT_NAME status    # Show status
    $SCRIPT_NAME test      # Test connection

Requirements:
    - Must be run as root (use sudo)
    - Requires: vsftpd

Configuration:
    - FTP User: $FTP_USER
    - FTP Root: $FTP_ROOT
    - Control Port: 21
    - Passive Ports: 50000-50100
    - No NAT, no firewall, no TLS
    - Simple, camera-friendly setup

Notes:
    - No firewall rules are configured
    - No TLS/SSL encryption
    - Direct network access
    - Chrooted user for security
    - Passive mode enabled for cameras

EOF
}

# Main function
main() {
    local command="${1:-}"
    
    case "$command" in
        start)
            check_root
            check_prerequisites
            create_directories
            create_ftp_user
            generate_vsftpd_conf
            create_user_list
            start_ftp_service
            log "PITS Photo FTP server started successfully"
            show_status
            ;;
        stop)
            check_root
            stop_ftp
            ;;
        restart)
            check_root
            stop_ftp
            sleep 2
            $SCRIPT_NAME start
            ;;
        status)
            show_status
            ;;
        test)
            test_ftp
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
