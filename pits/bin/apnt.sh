#!/bin/bash

# PITS Access Point Network Tool (apnt.sh)
# Creates a WiFi access point for photographers to connect their phones
# Assumes no NAT - direct routing for client connectivity

set -euo pipefail

# Configuration
SCRIPT_NAME=$(basename "$0")
CONFIG_DIR="/etc/pits"
LOG_DIR="/var/log/pits"
HOSTAPD_CONF="/etc/hostapd/hostapd.conf"
DHCPD_CONF="/etc/dhcp/dhcpd.conf"
INTERFACE="wlan0"
BRIDGE="br0"
BRIDGE_IP="192.168.4.1"
BRIDGE_NETWORK="192.168.4.0/24"
DHCP_RANGE_START="192.168.4.10"
DHCP_RANGE_END="192.168.4.100"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_DIR/apnt.log"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_DIR/apnt.log" >&2
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" | tee -a "$LOG_DIR/apnt.log"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_DIR/apnt.log"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Check prerequisites
check_prerequisites() {
    local missing_packages=()
    
    # Check for required packages
    for package in hostapd dnsmasq iptables bridge-utils; do
        if ! command -v "$package" &> /dev/null; then
            missing_packages+=("$package")
        fi
    done
    
    if [[ ${#missing_packages[@]} -gt 0 ]]; then
        error "Missing required packages: ${missing_packages[*]}"
        error "Install with: sudo apt-get install ${missing_packages[*]}"
        exit 1
    fi
    
    # Check for wireless interface
    if ! ip link show "$INTERFACE" &> /dev/null; then
        error "Wireless interface '$INTERFACE' not found"
        error "Available interfaces: $(ip link show | grep -E '^[0-9]+:' | cut -d: -f2 | tr '\n' ' ')"
        exit 1
    fi
    
    log "Prerequisites check passed"
}

# Create necessary directories
create_directories() {
    mkdir -p "$CONFIG_DIR" "$LOG_DIR"
    log "Created necessary directories"
}

# Generate hostapd configuration
generate_hostapd_conf() {
    local hostname="$1"
    local ssid="PITS-${hostname}"
    
    cat > "$HOSTAPD_CONF" << EOF
# PITS Access Point Configuration
# Generated by $SCRIPT_NAME on $(date)

# Interface configuration
interface=$INTERFACE
bridge=$BRIDGE

# Wireless configuration
ssid=$ssid
hw_mode=g
channel=7
wmm_enabled=0
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0

# Security (open network for field use)
# For production, consider adding WPA2 security

# Country code
country_code=US

# Logging
logger_syslog=1
logger_syslog_level=2

# Hostname display
ap_table_expiration_time=3600
acs_exclude_dfs=1
EOF
    
    log "Generated hostapd configuration for SSID: $ssid"
}

# Generate DHCP configuration
generate_dhcp_conf() {
    local hostname="$1"
    
    cat > "$DHCPD_CONF" << EOF
# PITS DHCP Configuration
# Generated by $SCRIPT_NAME on $(date)

# Global settings
default-lease-time 3600;
max-lease-time 7200;
authoritative;

# Hostname for clients
option host-name "$hostname";
option domain-name "pits.local";

# DNS servers (use Google DNS for field connectivity)
option domain-name-servers 8.8.8.8, 8.8.4.4;

# Subnet configuration
subnet 192.168.4.0 netmask 255.255.255.0 {
    range $DHCP_RANGE_START $DHCP_RANGE_END;
    option routers $BRIDGE_IP;
    option broadcast-address 192.168.4.255;
    
    # Hostname for this server
    option host-name "$hostname";
    
    # Static lease for the server itself
    host $hostname {
        hardware ethernet $(cat /sys/class/net/$BRIDGE/address 2>/dev/null || echo "00:00:00:00:00:00");
        fixed-address $BRIDGE_IP;
    }
}
EOF
    
    log "Generated DHCP configuration for hostname: $hostname"
}

# Setup network bridge
setup_bridge() {
    # Create bridge if it doesn't exist
    if ! ip link show "$BRIDGE" &> /dev/null; then
        ip link add name "$BRIDGE" type bridge
        log "Created bridge interface: $BRIDGE"
    fi
    
    # Add wireless interface to bridge
    ip link set "$INTERFACE" master "$BRIDGE"
    log "Added $INTERFACE to bridge $BRIDGE"
    
    # Configure bridge IP
    ip addr add "$BRIDGE_IP/24" dev "$BRIDGE"
    ip link set "$BRIDGE" up
    log "Configured bridge IP: $BRIDGE_IP"
}

# Configure routing (no NAT)
configure_routing() {
    # Enable IP forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    # Allow forwarding on bridge interface
    iptables -A FORWARD -i "$BRIDGE" -j ACCEPT
    iptables -A FORWARD -o "$BRIDGE" -j ACCEPT
    
    log "Configured routing (no NAT) for bridge interface"
}

# Start services
start_services() {
    local hostname="$1"
    
    # Stop any existing services
    systemctl stop hostapd dnsmasq 2>/dev/null || true
    
    # Start hostapd
    systemctl start hostapd
    if systemctl is-active --quiet hostapd; then
        log "Started hostapd service"
    else
        error "Failed to start hostapd service"
        exit 1
    fi
    
    # Start dnsmasq
    systemctl start dnsmasq
    if systemctl is-active --quiet dnsmasq; then
        log "Started dnsmasq service"
    else
        error "Failed to start dnsmasq service"
        exit 1
    fi
    
    # Set system hostname
    hostnamectl set-hostname "$hostname"
    log "Set system hostname to: $hostname"
    
    # Update /etc/hosts
    if ! grep -q "$hostname" /etc/hosts; then
        echo "$BRIDGE_IP $hostname $hostname.pits.local" >> /etc/hosts
        log "Updated /etc/hosts with $hostname"
    fi
}

# Show status
show_status() {
    echo -e "\n${BLUE}=== PITS Access Point Status ===${NC}"
    echo -e "Hostname: $(hostname)"
    echo -e "Bridge Interface: $BRIDGE"
    echo -e "Bridge IP: $BRIDGE_IP"
    echo -e "Wireless Interface: $INTERFACE"
    echo -e "SSID: PITS-$(hostname)"
    echo -e "Network: $BRIDGE_NETWORK"
    echo -e "DHCP Range: $DHCP_RANGE_START - $DHCP_RANGE_END"
    
    echo -e "\n${BLUE}=== Service Status ===${NC}"
    echo -e "hostapd: $(systemctl is-active hostapd 2>/dev/null || echo 'inactive')"
    echo -e "dnsmasq: $(systemctl is-active dnsmasq 2>/dev/null || echo 'inactive')"
    
    echo -e "\n${BLUE}=== Connected Clients ===${NC}"
    if command -v arp &> /dev/null; then
        arp -i "$BRIDGE" | grep -v "incomplete" || echo "No clients connected"
    else
        echo "arp command not available"
    fi
    
    echo -e "\n${BLUE}=== Bridge Status ===${NC}"
    ip addr show "$BRIDGE" 2>/dev/null || echo "Bridge not configured"
}

# Stop access point
stop_ap() {
    log "Stopping PITS access point..."
    
    # Stop services
    systemctl stop hostapd dnsmasq 2>/dev/null || true
    
    # Remove bridge configuration
    if ip link show "$BRIDGE" &> /dev/null; then
        ip link set "$BRIDGE" down
        ip link delete "$BRIDGE" type bridge 2>/dev/null || true
        log "Removed bridge interface"
    fi
    
    # Reset wireless interface
    if ip link show "$INTERFACE" &> /dev/null; then
        ip link set "$INTERFACE" down
        ip link set "$INTERFACE" up
        log "Reset wireless interface"
    fi
    
    log "Access point stopped"
}

# Show usage
show_usage() {
    cat << EOF
Usage: $SCRIPT_NAME <command> [hostname]

Commands:
    start <hostname>    Start access point with specified hostname
    stop               Stop access point and cleanup
    status             Show current access point status
    restart <hostname> Restart access point with new hostname
    help               Show this help message

Examples:
    $SCRIPT_NAME start PITS-Field01    # Start AP with hostname PITS-Field01
    $SCRIPT_NAME stop                  # Stop AP
    $SCRIPT_NAME status                # Show status
    $SCRIPT_NAME restart PITS-Field02  # Restart with new hostname

Requirements:
    - Must be run as root (use sudo)
    - Requires: hostapd, dnsmasq, iptables, bridge-utils
    - Wireless interface: $INTERFACE

Notes:
    - Hostname is required for start/restart commands
    - SSID will be: PITS-<hostname>
    - Network: $BRIDGE_NETWORK
    - No NAT - direct routing for client connectivity
    - Clients will see hostname as server name

EOF
}

# Main function
main() {
    local command="${1:-}"
    local hostname="${2:-}"
    
    case "$command" in
        start)
            if [[ -z "$hostname" ]]; then
                error "Hostname is required for start command"
                show_usage
                exit 1
            fi
            check_root
            check_prerequisites
            create_directories
            generate_hostapd_conf "$hostname"
            generate_dhcp_conf "$hostname"
            setup_bridge
            configure_routing
            start_services "$hostname"
            log "PITS access point started successfully with hostname: $hostname"
            show_status
            ;;
        stop)
            check_root
            stop_ap
            ;;
        restart)
            if [[ -z "$hostname" ]]; then
                error "Hostname is required for restart command"
                show_usage
                exit 1
            fi
            check_root
            stop_ap
            sleep 2
            $SCRIPT_NAME start "$hostname"
            ;;
        status)
            show_status
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
