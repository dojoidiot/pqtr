#!/bin/bash

# Site Project Main Script
# Main entry point for the site project

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Project configuration
PROJECT_NAME="Site"
PROJECT_VERSION="1.0.0"

# Function to show usage
show_usage() {
    echo "Usage: $0 {start|stop|status|config|build|serve|deploy|help}"
    echo ""
    echo "Commands:"
    echo "  start   - Start the site project"
    echo "  stop    - Stop the site project"
    echo "  status  - Show project status"
    echo "  config  - Show configuration"
    echo "  build   - Build from source"
    echo "  serve   - Serve web content locally"
    echo "  deploy  - Deploy to production"
    echo "  help    - Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 start"
    echo "  $0 status"
    echo "  $0 serve"
    echo "  $0 deploy"
}

# Function to start project
start_project() {
    echo -e "${BLUE}üöÄ Starting $PROJECT_NAME...${NC}"
    
    # Create necessary directories
    mkdir -p var/logs var/cache var/tmp var/build var/deploy
    
    # Start services (customize as needed)
    echo "‚úÖ Project started successfully"
    echo "üìÅ Working directory: $(pwd)"
    echo "üåê Web content: http://localhost:8080"
    echo "üìä Build directory: var/build/"
}

# Function to stop project
stop_project() {
    echo -e "${BLUE}üõë Stopping $PROJECT_NAME...${NC}"
    
    # Stop services (customize as needed)
    echo "‚úÖ Project stopped successfully"
}

# Function to show status
show_status() {
    echo -e "${BLUE}üìä $PROJECT_NAME Status${NC}"
    echo "=================="
    echo "Project: $PROJECT_NAME v$PROJECT_VERSION"
    echo "Directory: $(pwd)"
    echo ""
    
    # Check directory structure
    echo "üìÅ Directory Structure:"
    for dir in bin etc src var www; do
        if [ -d "$dir" ]; then
            echo "  ‚úÖ $dir/"
        else
            echo "  ‚ùå $dir/ (missing)"
        fi
    done
    
    echo ""
    echo "üîß Configuration:"
    if [ -f "etc/site.conf" ]; then
        echo "  ‚úÖ Configuration file found"
    else
        echo "  ‚ö†Ô∏è  No configuration file"
    fi
    
    echo ""
    echo "üì¶ Build Status:"
    if [ -d "var/build" ] && [ "$(ls -A var/build 2>/dev/null)" ]; then
        echo "  ‚úÖ Build artifacts present"
        ls -la var/build/
    else
        echo "  ‚ö†Ô∏è  No build artifacts"
    fi
}

# Function to show configuration
show_config() {
    echo -e "${BLUE}‚öôÔ∏è  Project Configuration${NC}"
    echo "========================"
    
    if [ -f "etc/site.conf" ]; then
        cat etc/site.conf
    else
        echo "No configuration file found"
        echo "Create etc/site.conf to customize settings"
    fi
}

# Function to build project
build_project() {
    echo -e "${BLUE}üî® Building $PROJECT_NAME...${NC}"
    
    if [ -d "src" ]; then
        echo "Building from source..."
        mkdir -p var/build
        
        # Copy source files to build directory
        cp -r src/* var/build/ 2>/dev/null || true
        cp -r www/* var/build/ 2>/dev/null || true
        
        # Add build timestamp
        echo "Build completed: $(date)" > var/build/build-info.txt
        
        echo "‚úÖ Build completed"
        echo "üìÅ Build directory: var/build/"
    else
        echo "‚ùå Source directory not found"
        exit 1
    fi
}

# Function to serve web content
serve_web() {
    echo -e "${BLUE}üåê Serving web content...${NC}"
    
    if [ -d "www" ]; then
        echo "Starting web server on port 8080..."
        echo "Press Ctrl+C to stop"
        cd www && python3 -m http.server 8080
    else
        echo "‚ùå Web directory not found"
        exit 1
    fi
}

# Function to deploy project
deploy_project() {
    echo -e "${BLUE}üöÄ Deploying $PROJECT_NAME...${NC}"
    
    if [ ! -d "var/build" ] || [ -z "$(ls -A var/build 2>/dev/null)" ]; then
        echo "‚ùå No build artifacts found. Run 'build' first."
        exit 1
    fi
    
    echo "Preparing deployment..."
    mkdir -p var/deploy
    
    # Create deployment package
    tar -czf var/deploy/site-$(date +%Y%m%d-%H%M%S).tar.gz -C var/build .
    
    echo "‚úÖ Deployment package created"
    echo "üì¶ Package: var/deploy/"
    ls -la var/deploy/
    
    echo ""
    echo "Next steps:"
    echo "  1. Upload package to production server"
    echo "  2. Extract and configure on target server"
    echo "  3. Update web server configuration"
}

# Main script logic
case "$1" in
    start)
        start_project
        ;;
    stop)
        stop_project
        ;;
    status)
        show_status
        ;;
    config)
        show_config
        ;;
    build)
        build_project
        ;;
    serve)
        serve_web
        ;;
    deploy)
        deploy_project
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        echo -e "${BLUE}Welcome to $PROJECT_NAME v$PROJECT_VERSION${NC}"
        echo ""
        show_usage
        ;;
esac
